@page "/login"
@using BlazorApp.DBFirst.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


<h3>Login</h3>

<EditForm Model="@userInfo" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">               
                 <label for="Username" class="form-label">Username</label>
                <InputText @bind-Value="userInfo.UserName" class="form-control" />
                <ValidationMessage For="@(() => userInfo.UserName)" />
            </div>
            <div class="form-group">
                <label for="Password" class="form-label">Password</label>                
                <InputText @bind-Value="userInfo.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => userInfo.Password)" />
            </div>
            <div class="form-group">
            <button type="submit" class="btn btn-primary">                
                Login
            </button>
            </div>            
</EditForm>

@if(isLogin){<p>LoggedIn</p>}

@code {
    private UserInformation userInfo = new();
    private bool isLogin;

    private async void OnValidSubmit()
    {
        var result = await Http.PostAsJsonAsync("api/UserInformation", userInfo);
        Console.WriteLine($"response = {result}");
        if(result.IsSuccessStatusCode)
        {
            await sessionStorage.SetItemAsync("isLogin", true);
            BlogDetail();      
        }

        else
        {
            await JS.InvokeVoidAsync("alert", "Invalid username or password!");
        }
    }
    private void BlogDetail()
    {
        NavigationManager.NavigateTo("/fetchmanagerblogdetails");
    }

    protected override async Task OnParametersSetAsync()
    {
        isLogin = await sessionStorage.GetItemAsync<bool>("isLogin");
    }
    

}